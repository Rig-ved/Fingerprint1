var FinoveraFingerprint = function(e) {
    "use strict";
    class t {
        checkOffset() {
            const e = (new Date).getFullYear();
            return Math.max(parseFloat(new Date(e, 0, 1).getTimezoneOffset()), parseFloat(new Date(e, 6, 1).getTimezoneOffset()))
        }
        getTimeZoneDetails() {
            var e;
            const t = null == (e = window.Intl) ? void 0 : e.DateTimeFormat;
            if (t) {
                const e = (new t).resolvedOptions(),
                    i = (new Date).toLocaleDateString(void 0, {
                        day: "2-digit",
                        timeZoneName: "long"
                    }).substring(4);
                if (e) return {
                    timezone: {
                        area: e.timeZone,
                        offset: this.checkOffset(),
                        calendar: e.calendar,
                        zone: i,
                        year: e.year,
                        locale: e.locale,
                        date: new Date
                    }
                }
            }
            const i = -this.checkOffset();
            return {
                timezone: `UTC${i>=0?"+":""}${Math.abs(i)}`
            }
        }
    }
    class i {
        getPluginInfo() {
            let e = navigator.plugins,
                t = [...e];
            if (!e) return;
            let i = [];
            return t.forEach((e => {
                i.push({
                    pluginName: e.name ? e.name : null,
                    description: e.description ? e.description : null,
                    fileName: e.filename ? e.filename : null
                })
            })), i.length > 0 ? {
                plugin: {
                    types: i,
                    pdfViewerEnabled: !!navigator.pdfViewerEnabled && navigator.pdfViewerEnabled
                }
            } : {
                plugin: null
            }
        }
    }

    function n(e) {
        return e.reduce(((e, t) => e + (t ? 1 : 0)), 0)
    }

    function r() {
        let e = window.matchMedia || window.msMatchMedia;
        if (e) {
            return e("(pointer:coarse)").matches
        }
        return !1
    }

    function a() {
        let e = "ontouchstart" in window || navigator.msMaxTouchPoints;
        return !(!window.matchMedia("(any-pointer: coarse)").matches || !e)
    }

    function o() {
        return n(["ApplePayError" in window, "CSSPrimitiveValue" in window, "Counter" in window, 0 === navigator.vendor.indexOf("Apple"), "getStorageUpdates" in navigator, "WebKitMediaKeys" in window]) >= 4
    }
    class s {
        getScreenDetails() {
            var e;
            const t = window.screen,
                i = e => {
                    return t = parseInt(e), i = null, "number" == typeof t && isNaN(t) ? i : t;
                    var t, i
                };
            return t ? {
                screen: {
                    width: i(t.width),
                    height: i(t.height),
                    availHeight: i(t.availHeight),
                    availWidth: i(t.availWidth),
                    colorDepth: i(t.colorDepth),
                    devicePixelRatio: window.devicePixelRatio ? window.devicePixelRatio : "",
                    orientationAngle: t.orientation ? t.orientation.angle : null,
                    orientationType: t.orientation ? null == (e = t.orientation) ? void 0 : e.type : null,
                    pixelDepth: i(t.pixelDepth)
                }
            } : {
                screen: null
            }
        }
    }
    class l {
        getGraphicsCardInfo() {
            const e = document.createElement("canvas").getContext("webgl"),
                t = e.getExtension("WEBGL_debug_renderer_info");
            return e ? {
                graphics: {
                    debug: {
                        unMaskedRenderer: t.UNMASKED_RENDERER_WEBGL,
                        unMaskedVendor: t.UNMASKED_VENDOR_WEBGL
                    },
                    vendor: e.getParameter(t.UNMASKED_VENDOR_WEBGL),
                    renderer: e.getParameter(t.UNMASKED_RENDERER_WEBGL) || e.getParameter(e.RENDERER)
                }
            } : {
                graphics: null
            }
        }
    }
    class c {
        isCookieEnabled() {
            const e = document;
            try {
                e.cookie = "cookietest=1; SameSite=Strict;";
                const t = -1 !== e.cookie.indexOf("cookietest=");
                return e.cookie = "cookietest=1; SameSite=Strict; expires=Thu, 01-Jan-1970 00:00:01 GMT", t
            } catch (e) {
                return !1
            }
        }
        isCookieExist() {
            return !this.isCookieEnabled() || "" != document.cookie
        }
        getCookiesInfo() {
            return {
                cookie: {
                    enabled: this.isCookieEnabled(),
                    exist: this.isCookieExist()
                }
            }
        }
    }
    var u = (e, t, i) => new Promise(((n, r) => {
        var a = e => {
                try {
                    s(i.next(e))
                } catch (e) {
                    r(e)
                }
            },
            o = e => {
                try {
                    s(i.throw(e))
                } catch (e) {
                    r(e)
                }
            },
            s = e => e.done ? n(e.value) : Promise.resolve(e.value).then(a, o);
        s((i = i.apply(e, t)).next())
    }));
    class d {
        isIncognito() {
            return u(this, null, (function*() {
                return yield new Promise(((e, t) => {
                    const i = t => {
                        e({
                            private: t
                        })
                    };
                    let r = () => {
                            navigator.webkitTemporaryStorage.queryUsageAndQuota((function(e, t) {
                                var n;
                                i(t < (void 0 !== (n = window).performance && void 0 !== n.performance.memory && void 0 !== n.performance.memory.jsHeapSizeLimit ? performance.memory.jsHeapSizeLimit : 1073741824))
                            }), (function(e) {
                                t(new Error("detectIncognito somehow failed to query storage quota: " + e.message))
                            }))
                        },
                        a = () => {
                            void 0 !== self.Promise && void 0 !== self.Promise.allSettled ? r() : (0, window.webkitRequestFileSystem)(0, 1, (function() {
                                i(!1)
                            }), (function() {
                                i(!0)
                            }))
                        },
                        s = () => {
                            void 0 !== navigator.maxTouchPoints ? (() => {
                                var e = String(Math.random());
                                try {
                                    window.indexedDB.open(e, 1).onupgradeneeded = function(t) {
                                        var n, r = t.target.result;
                                        try {
                                            r.createObjectStore("test", {
                                                autoIncrement: !0
                                            }).put(new Blob), i(!1)
                                        } catch (e) {
                                            var a = e;
                                            if (e instanceof Error && (a = null != (n = e.message) ? n : e), "string" != typeof a) return i(!1);
                                            var o = /BlobURLs are not yet supported/.test(a);
                                            return i(o)
                                        } finally {
                                            r.close(), window.indexedDB.deleteDatabase(e)
                                        }
                                    }
                                } catch (e) {
                                    return i(!1)
                                }
                            })() : (() => {
                                var e = window.openDatabase,
                                    t = window.localStorage;
                                try {
                                    e(null, null, null, null)
                                } catch (e) {
                                    return i(!0)
                                }
                                try {
                                    t.setItem("test", "1"), t.removeItem("test")
                                } catch (e) {
                                    return i(!0)
                                }
                                i(!1)
                            })()
                        };
                    o() ? s() : ! function() {
                        const e = window,
                            t = navigator;
                        return n(["webkitPersistentStorage" in t, "webkitTemporaryStorage" in t, 0 === t.vendor.indexOf("Google"), "webkitResolveLocalFileSystemURL" in e, "BatteryManager" in e, "webkitMediaStream" in e, "webkitSpeechGrammar" in e]) >= 5
                    }() ? ! function() {
                        var e, t;
                        const i = window;
                        return n(["buildID" in navigator, "MozAppearance" in (null != (t = null == (e = document.documentElement) ? void 0 : e.style) ? t : {}), "onmozfullscreenchange" in i, "mozInnerScreenX" in i, "CSSMozDocumentRule" in i, "CanvasCaptureMediaStream" in i]) >= 4
                    }() ? ! function() {
                        const e = window,
                            t = navigator;
                        return n(["msWriteProfilerMark" in e, "MSStream" in e, "msLaunchUri" in t, "msSaveBlob" in t]) >= 3
                    }() ? t(new Error("Unable to resolve the browser or its version")) : i(void 0 === window.indexedDB) : i(void 0 === navigator.serviceWorker) : a()
                }))
            }))
        }
        getBrowserInfo() {
            return u(this, null, (function*() {
                let e = navigator.userAgent,
                    t = null,
                    i = yield this.isIncognito();
                t = i ? i.private : "Cant resolve";
                let n, o, s, l = navigator.appName,
                    c = "" + parseFloat(navigator.appVersion),
                    u = parseInt(navigator.appVersion, 10);
                return -1 != (o = e.indexOf("Opera")) ? (l = "Opera", c = e.substring(o + 6), -1 != (o = e.indexOf("Version")) && (c = e.substring(o + 8))) : -1 != (o = e.indexOf("MSIE")) ? (l = "Microsoft Internet Explorer", c = e.substring(o + 5)) : -1 != (o = e.indexOf("Chrome")) ? (l = "Chrome", c = e.substring(o + 7)) : -1 != (o = e.indexOf("Safari")) ? (l = "Safari", c = e.substring(o + 7), -1 != (o = e.indexOf("Version")) && (c = e.substring(o + 8))) : -1 != (o = e.indexOf("Firefox")) ? (l = "Firefox", c = e.substring(o + 8)) : -1 != (o = e.indexOf("CriOS")) ? (l = "Chrome", c = e.substring(o + 6)) : (n = e.lastIndexOf(" ") + 1) < (o = e.lastIndexOf("/")) && (l = e.substring(n, o), c = e.substring(o + 1), l.toLowerCase() == l.toUpperCase() && (l = navigator.appName)), -1 != (s = c.indexOf(";")) && (c = c.substring(0, s)), -1 != (s = c.indexOf(" ")) && (c = c.substring(0, s)), u = parseInt("" + c, 10), isNaN(u) && (c = "" + parseFloat(navigator.appVersion), u = parseInt(navigator.appVersion, 10)), {
                    browser: {
                        name: l,
                        privateMode: t,
                        version: c,
                        majorVersion: u,
                        mobileNavigation: 1 == r(),
                        webNavigation: 0 == r(),
                        touchEnabled: 1 == a()
                    }
                }
            }))
        }
    }
    class p {
        getNetworkInfo() {
            let e = navigator.connection ? navigator.connection : null;
            return e ? {
                network: {
                    downlinkSpeed: `${String(e.downlink)}Mbps`,
                    connectionType: e.effectiveType,
                    roundTripTime: `${String(e.rtt)}Ms`
                }
            } : {
                network: null
            }
        }
    }
    class f {
        getDetailedFonts() {
            return e = this, t = null, i = function*() {
                let e = [
                    ["Droid Sans Mono", "Geneva", "Helvetica Neue", "Lucida Console", "Noto Color Emoji", "Roboto", "Ubuntu", "Helvetica Neue", "Geneva", "Kohinoor Devanagari Medium", "Luminari", "PingFang HK Light", "American Typewriter Semibold", "Futura Bold", "SignPainter-HouseScript Semibold", "InaiMathi Bold", "Galvji", "MuktaMahee Regular", "Cambria Math", "Lucida Console", "Aldhabi", "Gadugi", "Myanmar Text", "Nirmala UI", "Leelawadee UI", "Javanese Text", "Segoe UI Emoji", "HoloLens MDL2 Assets", "Segoe MDL2 Assets", "Bahnschrift", "Ink Free", "Segoe Fluent Icons", "Arimo", "Chilanka", "Cousine", "Jomolhari", "MONO", "Noto Color Emoji", "Ubuntu", "Dancing Script", "Droid Sans Mono", "Roboto", "Microsoft Outlook", "ZWAdobeF", "Amiri", "KACSTOffice", "Liberation Mono", "Source Code Pro", "DejaVu Sans", "Gentium Book Basic", "OpenSymbol"].sort().toString(), "Arial", "Arial Black", "Bahnschrift", "Calibri", "Cambria", "Cambria Math", "Candara", "Comic Sans MS", "Consolas", "Constantia", "Corbel", "Courier New", "Ebrima", "Franklin Gothic Medium", "Gabriola", "Gadugi", "Georgia", "HoloLens MDL2 Assets", "Impact", "Ink Free", "Javanese Text", "Leelawadee UI", "Lucida Console", "Lucida Sans Unicode", "Malgun Gothic", "Marlett", "Microsoft Himalaya", "Microsoft JhengHei", "Microsoft New Tai Lue", "Microsoft PhagsPa", "Microsoft Sans Serif", "Microsoft Tai Le", "Microsoft YaHei", "Microsoft Yi Baiti", "MingLiU-ExtB", "Mongolian Baiti", "MS Gothic", "MV Boli", "Myanmar Text", "Nirmala UI", "Palatino Linotype", "Segoe MDL2 Assets", "Segoe Print", "Segoe Script", "Segoe UI", "Segoe UI Historic", "Segoe UI Emoji", "Segoe UI Symbol", "SimSun", "Sitka", "Sylfaen", "Symbol", "Tahoma", "Times New Roman", "Trebuchet MS", "Verdana", "Webdings", "Wingdings", "Yu Gothic", "American Typewriter", "Andale Mono", "Arial", "Arial Black", "Arial Narrow", "Arial Rounded MT Bold", "Arial Unicode MS", "Avenir", "Avenir Next", "Avenir Next Condensed", "Baskerville", "Big Caslon", "Bodoni 72", "Bodoni 72 Oldstyle", "Bodoni 72 Smallcaps", "Bradley Hand", "Brush Script MT", "Chalkboard", "Chalkboard SE", "Chalkduster", "Charter", "Cochin", "Comic Sans MS", "Copperplate", "Courier", "Courier New", "Didot", "DIN Alternate", "DIN Condensed", "Futura", "Geneva", "Georgia", "Gill Sans", "Helvetica", "Helvetica Neue", "Herculanum", "Hoefler Text", "Impact", "Lucida Grande", "Luminari", "Marker Felt", "Menlo", "Microsoft Sans Serif", "Monaco", "Noteworthy", "Optima", "Palatino", "Papyrus", "Phosphate", "Rockwell", "Savoye LET", "SignPainter", "Skia", "Snell Roundhand", "Tahoma", "Times", "Times New Roman", "Trattatello", "Trebuchet MS", "Verdana", "Zapfino"
                ].sort();
                e = [...new Set(e)], yield document.fonts.ready;
                let t = [];
                return e.forEach((e => {
                    (document.fonts.check(`32px "${e}"`) || document.fonts.check(`14px "${e}"`) || document.fonts.check(`64px "${e}"`)) && t.push(e)
                })), {
                    availableFonts: t
                }
            }, new Promise(((n, r) => {
                var a = e => {
                        try {
                            s(i.next(e))
                        } catch (e) {
                            r(e)
                        }
                    },
                    o = e => {
                        try {
                            s(i.throw(e))
                        } catch (e) {
                            r(e)
                        }
                    },
                    s = e => e.done ? n(e.value) : Promise.resolve(e.value).then(a, o);
                s((i = i.apply(e, t)).next())
            }));
            var e, t, i
        }
    }
    var g = (e, t, i) => new Promise(((n, r) => {
        var a = e => {
                try {
                    s(i.next(e))
                } catch (e) {
                    r(e)
                }
            },
            o = e => {
                try {
                    s(i.throw(e))
                } catch (e) {
                    r(e)
                }
            },
            s = e => e.done ? n(e.value) : Promise.resolve(e.value).then(a, o);
        s((i = i.apply(e, t)).next())
    }));
    class m {
        getPermissionData() {
            return g(this, null, (function*() {
                return {
                    permissions: yield this.listPermissions()
                }
            }))
        }
        listPermissions() {
            return g(this, null, (function*() {
                const e = e => navigator.permissions.query({
                    name: e
                }).then((t => ({
                    name: e,
                    state: t.state
                }))).catch((t => ({
                    name: e,
                    state: "unknown"
                })));
                return "permissions" in navigator ? yield Promise.all([e("accelerometer"), e("ambient-light-sensor"), e("background-fetch"), e("background-sync"), e("bluetooth"), e("camera"), e("clipboard"), e("clipboard-read"), e("clipboard-write"), e("payment-handler"), e("periodic-background-sync"), e("device-info"), e("display-capture"), e("gamepad"), e("geolocation"), e("gyroscope"), e("magnetometer"), e("microphone"), e("midi"), e("nfc"), e("notifications"), e("idle-detection"), e("window-placement"), e("font-access"), e("persistent-storage"), e("push"), e("screen-wake-lock"), e("speaker"), e("storage-access"), e("speaker-selection")]).then((e => e.reduce(((e, t) => {
                    const {
                        state: i,
                        name: n
                    } = t || {};
                    return e[i] ? (e[i].push(n), e) : (e[i] = [n], e)
                }), {}))).catch((e => console.error(e))): null
            }))
        }
    }
    var h = (e, t, i) => new Promise(((n, r) => {
        var a = e => {
                try {
                    s(i.next(e))
                } catch (e) {
                    r(e)
                }
            },
            o = e => {
                try {
                    s(i.throw(e))
                } catch (e) {
                    r(e)
                }
            },
            s = e => e.done ? n(e.value) : Promise.resolve(e.value).then(a, o);
        s((i = i.apply(e, t)).next())
    }));
    class v {
        getDeviceInfo() {
            return h(this, null, (function*() {
                let e = yield this.getLocalIP(), t = yield this.getBatteryInformation(), i = null, n = yield this.getBlueToothAvailaibility();
                return i = "string" != typeof t ? {
                    charging: t.charging,
                    batteryLevel: 100 * t.level + "%",
                    chargingTime: "Infinity" == t.chargingTime ? 1 / 0 : parseInt(String(t.chargingTime / 60), 10),
                    dischargingTime: "Infinity" == t.dischargingTime ? 1 / 0 : parseInt(String(t.dischargingTime / 60), 10)
                } : t, {
                    device: {
                        cpuCores: navigator ? `${null==navigator?void 0:navigator.hardwareConcurrency}GB` : null,
                        operatingSystem: this.getOS(navigator.userAgent),
                        battery: i,
                        userAgent: navigator.userAgent ? navigator.userAgent : null,
                        deviceName: this.getDeviceDetails(navigator.userAgent),
                        clientLocalIP: e || null,
                        bluetoothAvailable: n,
                        maxTouchPoints: navigator.maxTouchPoints ? navigator.maxTouchPoints : 0
                    }
                }
            }))
        }
        getBatteryInformation() {
            return h(this, null, (function*() {
                if (!("getBattery" in navigator)) return "Battery Api Not Supported";
                return yield navigator.getBattery()
            }))
        }
        getBlueToothAvailaibility() {
            return h(this, null, (function*() {
                try {
                    if ("bluetooth" in navigator) {
                        let e = null;
                        try {
                            return e = yield navigator.bluetooth.getAvailability(), e
                        } catch (t) {
                            e = !1
                        }
                        return e
                    }
                    return console.warn("Web Bluetooth API is not supported in this document."), !1
                } catch (e) {
                    console.error("Error checking bluetooth:", e)
                }
            }))
        }
        getOS(e) {
            return /windows phone/gi.test(e) ? "Windows Phone" : /win(dows|16|32|64|95|98|nt)|wow64/gi.test(e) ? "Windows" : /android/gi.test(e) ? "Android" : /cros/gi.test(e) ? "Chrome OS" : /linux/gi.test(e) ? "Linux" : /ipad/gi.test(e) ? "iPad" : /iphone/gi.test(e) ? "iPhone" : /ipod/gi.test(e) ? "iPod" : /ios/gi.test(e) ? "iOS" : /mac/gi.test(e) ? "Mac" : /BB10/gi.test(e) ? "BlackBerry" : "Other"
        }
        getDeviceDetails(e, t = !0) {
            if (!e) return "unknown";
            const i = /\((.+)\)/,
                n = /((android).+)/i,
                r = /^(linux|[a-z]|wv|mobile|[a-z]{2}(-|_)[a-z]{2}|[a-z]{2})$|windows|(rv:|trident|webview|iemobile).+/i,
                a = /build\/.+\s|\sbuild\/.+/i,
                o = /android( |-)\d+/i,
                s = /((windows).+)/i,
                l = /^(windows|ms(-|)office|microsoft|compatible|[a-z]|x64|[a-z]{2}(-|_)[a-z]{2}|[a-z]{2})$|(rv:|outlook|ms(-|)office|microsoft|trident|\.net|msie|httrack|media center|infopath|aol|opera|iemobile|webbrowser).+/i,
                c = /w(ow|in)64/i,
                u = /cros/i,
                d = /^([a-z]|x11|[a-z]{2}(-|_)[a-z]{2}|[a-z]{2})$|(rv:|trident).+/i,
                p = /\d+\.\d+\.\d+/i,
                f = /linux|x11|ubuntu|debian/i,
                g = /^([a-z]|x11|unknown|compatible|[a-z]{2}(-|_)[a-z]{2}|[a-z]{2})$|(rv:|java|oracle|\+http|http|unknown|mozilla|konqueror|valve).+/i,
                m = /(cpu iphone|cpu os|iphone os|mac os|macos|intel os|ppc mac).+/i,
                h = /^([a-z]|macintosh|compatible|mimic|[a-z]{2}(-|_)[a-z]{2}|[a-z]{2}|rv|\d+\.\d+)$|(rv:|silk|valve).+/i,
                v = /(ppc |intel |)(mac|mac |)os (x |x|)(\d{2}(_|\.)\d{1,2}|\d{2,})/i,
                w = /((symbianos|nokia|blackberry|morphos|mac).+)|\/linux|freebsd|symbos|series \d+|win\d+|unix|hp-ux|bsdi|bsd|x86_64/i,
                x = (e, t) => e.filter((e => t.test(e))).length;
            if (e = e.trim().replace(/\s{2,}/, " ").replace(/\((khtml|unlike|vizio|like gec|internal dummy|org\.eclipse|openssl|ipv6|via translate|safari|cardamon).+|xt\d+\)/gi, ""), i.test(e)) {
                const y = e.match(i)[0].slice(1, -1).replace(/,/g, ";").split(";").map((e => e.trim()));
                if (x(y, n)) return y.map((e => o.test(e) ? o.exec(e)[0].replace("-", " ") : e)).filter((e => !r.test(e))).join(" ").replace(t ? a : "", "").trim().replace(/\s{2,}/, " ");
                if (x(y, s)) return y.filter((e => !l.test(e))).join(" ").replace(/\sNT (\d+\.\d+)/, ((e, t) => "10.0" == t ? " 10" : "6.3" == t ? " 8.1" : "6.2" == t ? " 8" : "6.1" == t ? " 7" : "6.0" == t ? " Vista" : "5.2" == t ? " XP Pro" : "5.1" == t ? " XP" : "5.0" == t ? " 2000" : "4.0" == t ? e : " " + t)).replace(c, "(64-bit)").trim().replace(/\s{2,}/, " ");
                if (x(y, u)) return y.filter((e => !d.test(e))).join(" ").replace(t ? p : "", "").trim().replace(/\s{2,}/, " ");
                if (x(y, f)) return y.filter((e => !g.test(e))).join(" ").trim().replace(/\s{2,}/, " ");
                if (x(y, m)) return y.map((e => {
                    if (v.test(e)) {
                        const t = v.exec(e)[0],
                            i = {
                                "10_7": "Lion",
                                "10_8": "Mountain Lion",
                                "10_9": "Mavericks",
                                "10_10": "Yosemite",
                                "10_11": "El Capitan",
                                "10_12": "Sierra",
                                "10_13": "High Sierra",
                                "10_14": "Mojave",
                                "10_15": "Catalina",
                                11: "Big Sur",
                                12: "Monterey"
                            },
                            n = ((/(\d{2}(_|\.)\d{1,2}|\d{2,})/.exec(t) || [])[0] || "").replace(/\./g, "_"),
                            r = i[/^10/.test(n) ? n : (/^\d{2,}/.exec(n) || [])[0]];
                        return r ? `macOS ${r}` : t
                    }
                    return e
                })).filter((e => !h.test(e))).join(" ").replace(/\slike mac.+/gi, "").trim().replace(/\s{2,}/, " ");
                {
                    const e = y.filter((e => w.test(e)));
                    return e.length ? e.join(" ").trim().replace(/\s{2,}/, " ") : y.join(" ")
                }
            }
            return null
        }
        getLocalIP() {
            return h(this, null, (function*() {
                return yield new Promise((e => {
                    const t = new RTCPeerConnection;
                    t.createDataChannel("dataChannel"), t.createOffer().then((e => {
                        t.setLocalDescription(e)
                    })), t.onicecandidate = i => {
                        i && i.candidate && i.candidate.candidate && (e(i.candidate.candidate.split(" ")[4]), t.close())
                    }
                }))
            }))
        }
    }
    class w {
        getLocationInfo() {
            return e = this, t = null, i = function*() {
                let e;
                try {
                    e = yield fetch("https://geolocation-db.com/json/").then((e => e.json()))
                } catch (t) {
                    e = yield fetch("https://geolocation-db.com/json/").then((e => e.json()))
                }
                let t = {
                    ipV4: e.IPv4,
                    city: e.city,
                    countryCode: e.country_code,
                    countryName: e.country_name,
                    latitude: e.latitude,
                    longitude: e.longitude,
                    postal: e.postal,
                    state: e.state
                };
                return e ? {
                    position: t
                } : {
                    position: null
                }
            }, new Promise(((n, r) => {
                var a = e => {
                        try {
                            s(i.next(e))
                        } catch (e) {
                            r(e)
                        }
                    },
                    o = e => {
                        try {
                            s(i.throw(e))
                        } catch (e) {
                            r(e)
                        }
                    },
                    s = e => e.done ? n(e.value) : Promise.resolve(e.value).then(a, o);
                s((i = i.apply(e, t)).next())
            }));
            var e, t, i
        }
    }
    var x = (e, t, i) => new Promise(((n, r) => {
        var a = e => {
                try {
                    s(i.next(e))
                } catch (e) {
                    r(e)
                }
            },
            o = e => {
                try {
                    s(i.throw(e))
                } catch (e) {
                    r(e)
                }
            },
            s = e => e.done ? n(e.value) : Promise.resolve(e.value).then(a, o);
        s((i = i.apply(e, t)).next())
    }));
    class y {
        getPlatformDetails() {
            return x(this, null, (function*() {
                let e = navigator.userAgentData;
                return e ? yield e.getHighEntropyValues(["architecture", "platform", "platformVersion", "model", "bitness"]): null
            }))
        }
        getPlatform() {
            return x(this, null, (function*() {
                let e = navigator.platform || "unknown",
                    t = yield this.getPlatformDetails();
                return "MacIntel" !== e || !o() || n(["safari" in window, !("DeviceMotionEvent" in window), !("ongestureend" in window), !("standalone" in navigator)]) >= 3 ? {
                    platform: {
                        type: e,
                        vendor: navigator.vendor ? navigator.vendor : null,
                        platformDetails: t || null
                    }
                } : function() {
                    if ("iPad" === navigator.platform) return !0;
                    const e = screen,
                        t = e.width / e.height;
                    return n(["MediaSource" in window, !!Element.prototype.webkitRequestFullscreen, t > .65 && t < 1.53]) >= 2
                }() ? {
                    platform: "iPad",
                    platformDetails: t || null
                } : {
                    platform: "iPhone",
                    platformDetails: t || null
                }
            }))
        }
    }
    const S = e => e.map((e => `${b(e.brand)};v=${e.version}`)).join(", "),
        b = e => ("string" == typeof e && e && (e = (e => e.replace(/"/g, '\\"'))(e = (e => e.replace(/\\/, "\\\\"))(e))), e),
        M = e => S(e),
        C = e => {
            if (void 0 !== e) {
                return `${b(e)}`
            }
            return e
        };
    class P {
        getAllSecHeaders() {
            return e = this, t = null, i = function*() {
                let e = {};
                return new Promise((e => {
                    const t = navigator && navigator.userAgentData;
                    t ? t.getHighEntropyValues(["brands", "mobile", "platform", "architecture", "bitness", "fullVersionList", "model", "platformVersion", "wow64"]).then((t => {
                        const i = {
                            "Sec-CH-UA": (n = t.brands, S(n)),
                            "Sec-CH-UA-Arch": C(t.architecture),
                            "Sec-CH-UA-Mobile": "?" + (t.mobile ? "1" : "0"),
                            "Sec-CH-UA-Model": C(t.model),
                            "Sec-CH-UA-Platform": C(t.platform),
                            "Sec-CH-UA-Platform-Version": C(t.platformVersion),
                            "Sec-CH-UA-Full-Version-List": M(t.fullVersionList),
                            "Sec-CH-UA-Bitness": C(t.bitness),
                            "Sec-CH-UA-Wow64": "?" + (t.wow64 ? "1" : "0")
                        };
                        var n;
                        e(i)
                    })) : navigator ? e({
                        "User-Agent": navigator.userAgent
                    }) : e({})
                })).then((t => {
                    for (const [i, n] of Object.entries(t)) e[i] = n
                })), {
                    secHeaders: e
                }
            }, new Promise(((n, r) => {
                var a = e => {
                        try {
                            s(i.next(e))
                        } catch (e) {
                            r(e)
                        }
                    },
                    o = e => {
                        try {
                            s(i.throw(e))
                        } catch (e) {
                            r(e)
                        }
                    },
                    s = e => e.done ? n(e.value) : Promise.resolve(e.value).then(a, o);
                s((i = i.apply(e, t)).next())
            }));
            var e, t, i
        }
    }
    class k {
        constructor() {}
        canvasPrint() {
            const e = document.createElement("canvas");
            let t = e.getContext("2d"),
                i = [];
            document.body.appendChild(e);
            let n = ["actualBoundingBoxAscent", "actualBoundingBoxDescent", "actualBoundingBoxLeft", "actualBoundingBoxRight", "fontBoundingBoxAscent", "fontBoundingBoxDescent", "width"];
            return ["50px  sans-serif", "50px  serif", "50px 'Andale Mono',  sans-serif", "50px 'Andale Mono',  serif", "50px 'Arial Narrow',  sans-serif", "50px 'Arial Narrow',  serif", "50px 'Arial Unicode MS',  sans-serif", "50px 'Arial Unicode MS',  serif", "50px 'Batang',  sans-serif", "50px 'Batang',  serif", "50px 'Bell MT',  sans-serif", "50px 'Bell MT',  serif", "50px 'Brush Script',  sans-serif", "50px 'Brush Script',  serif", "50px 'Brush Script MT',  sans-serif", "50px 'Brush Script MT',  serif", "50px 'Calibri',  sans-serif", "50px 'Calibri',  serif", "50px 'Charter',  sans-serif", "50px 'Charter',  serif", "50px 'Courier',  sans-serif", "50px 'Courier New',  sans-serif", "50px 'Curlz MT',  sans-serif", "50px 'Curlz MT',  serif", "50px 'DejaVu Sans',  sans-serif", "50px 'DejaVu Sans Mono',  sans-serif", "50px 'DejaVu Serif Condensed',  sans-serif", "50px 'DejaVu Serif Condensed',  serif", "50px 'Droid Sans',  sans-serif", "50px 'Droid Sans',  serif", "50px 'Droid Sans Fallback',  sans-serif", "50px 'Droid Sans Fallback',  serif", "50px 'Droid Serif',  sans-serif", "50px 'Droid Serif',  serif", "50px 'Forte',  sans-serif", "50px 'Forte',  serif", "50px 'Futura',  sans-serif", "50px 'Futura',  serif", "50px 'Geneva',  sans-serif", "50px 'Geneva',  serif", "50px 'Hei',  sans-serif", "50px 'Hei',  serif", "50px 'Leelawadee',  sans-serif", "50px 'Leelawadee',  serif", "50px 'Levenim MT',  sans-serif", "50px 'Levenim MT',  serif", "50px 'Liberation Sans',  sans-serif", "50px 'Liberation Sans',  serif", "50px 'Liberation Sans Narrow',  sans-serif", "50px 'Marlett',  sans-serif", "50px 'Marlett',  serif", "50px 'Meiryo UI',  sans-serif", "50px 'Meiryo UI',  serif", "50px 'Microsoft Uighur',  sans-serif", "50px 'Microsoft Uighur',  serif", "50px 'Microsoft YaHei UI',  sans-serif", "50px 'Microsoft YaHei UI',  serif", "50px 'MS Mincho',  sans-serif", "50px 'MS Mincho',  serif", "50px 'MS UI Gothic',  sans-serif", "50px 'MS UI Gothic',  serif", "50px 'NanumGothic',  sans-serif", "50px 'NanumGothic',  serif", "50px 'Nirmala UI',  sans-serif", "50px 'Nirmala UI',  serif", "50px 'Palatino',  sans-serif", "50px 'Palatino',  serif", "50px 'Papyrus',  sans-serif", "50px 'Papyrus',  serif", "50px 'PMingLiU',  sans-serif", "50px 'PT Serif',  sans-serif", "50px 'PT Serif',  serif", "50px 'SimHei',  sans-serif", "50px 'SimHei',  serif", "50px 'STIXVariants',  sans-serif", "50px 'STIXVariants',  serif", "50px 'STSong',  sans-serif", "50px 'STSong',  serif", "50px 'Traditional Arabic',  sans-serif", "50px 'Traditional Arabic',  serif", "50px 'Urdu Typesetting',  sans-serif", "50px 'Urdu Typesetting',  serif", "50px 'Verdana',  sans-serif", "50px 'Verdana',  serif", "50px 'Wingdings',  sans-serif", "50px 'Wingdings',  serif", "50px 'Wingdings 3',  sans-serif", "50px 'Wingdings 3',  serif", "50px 'Helkevtrica',  sans-serif", "50px 'Helkevtrica',  serif"].forEach((e => {
                t.font = e;
                let r = t.measureText("0-_{w."),
                    a = new Object;
                n.forEach((e => {
                    a[e] = r[e]
                })), i.push({
                    font: e,
                    size: a
                })
            })), e && e.style && (e.style.display = "none"), i
        }
        getCanvas() {
            return {
                canvas: this.canvasPrint()
            }
        }
    }
    class D {
        getWindowDimensions() {
            return {
                windowSize: {
                    outerHeight: window.outerHeight,
                    innerHeight: window.innerHeight,
                    outerWidth: window.outerWidth,
                    innerWidth: window.innerWidth
                }
            }
        }
    }
    const A = new class {
        constructor() {
            window.addEventListener("resize", (() => {
                this.getFingerPrintDetails({
                    location: !1
                })
            }))
        }
        getFingerPrintDetails(e) {
            return n = this, r = null, a = function*() {
                let n = [];
                return n.push(t.prototype.getTimeZoneDetails()), n.push(s.prototype.getScreenDetails()), n.push(i.prototype.getPluginInfo()), n.push(l.prototype.getGraphicsCardInfo()), n.push(c.prototype.getCookiesInfo()), n.push(yield d.prototype.getBrowserInfo()), n.push(p.prototype.getNetworkInfo()), n.push(yield f.prototype.getDetailedFonts()), n.push(yield m.prototype.getPermissionData()), n.push(yield v.prototype.getDeviceInfo()), e && e.location && n.push(yield w.prototype.getLocationInfo()), n.push(yield P.prototype.getAllSecHeaders()), n.push(D.prototype.getWindowDimensions()), n.push(yield y.prototype.getPlatform()), n.push(yield k.prototype.getCanvas()), {
                    data: Object.assign({}, ...n)
                }
            }, new Promise(((e, t) => {
                var i = e => {
                        try {
                            s(a.next(e))
                        } catch (e) {
                            t(e)
                        }
                    },
                    o = e => {
                        try {
                            s(a.throw(e))
                        } catch (e) {
                            t(e)
                        }
                    },
                    s = t => t.done ? e(t.value) : Promise.resolve(t.value).then(i, o);
                s((a = a.apply(n, r)).next())
            }));
            var n, r, a
        }
    };
    return e.fpInstance = A, e
}({});
